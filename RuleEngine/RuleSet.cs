//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace RuleEngine
{
    public partial class RuleSet
    {
        #region Primitive Properties
    
        public virtual int RuleStatementId
        {
            get { return _ruleStatementId; }
            set
            {
                if (_ruleStatementId != value)
                {
                    if (tblRuleStatement != null && tblRuleStatement.Id != value)
                    {
                        tblRuleStatement = null;
                    }
                    _ruleStatementId = value;
                }
            }
        }
        private int _ruleStatementId;
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual string Statement
        {
            get;
            set;
        }
    
        public virtual int Operation
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Rule> tblRules
        {
            get
            {
                if (_tblRules == null)
                {
                    var newCollection = new FixupCollection<Rule>();
                    newCollection.CollectionChanged += FixuptblRules;
                    _tblRules = newCollection;
                }
                return _tblRules;
            }
            set
            {
                if (!ReferenceEquals(_tblRules, value))
                {
                    var previousValue = _tblRules as FixupCollection<Rule>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixuptblRules;
                    }
                    _tblRules = value;
                    var newValue = value as FixupCollection<Rule>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixuptblRules;
                    }
                }
            }
        }
        private ICollection<Rule> _tblRules;
    
        public virtual RuleStatement tblRuleStatement
        {
            get { return _tblRuleStatement; }
            set
            {
                if (!ReferenceEquals(_tblRuleStatement, value))
                {
                    var previousValue = _tblRuleStatement;
                    _tblRuleStatement = value;
                    FixuptblRuleStatement(previousValue);
                }
            }
        }
        private RuleStatement _tblRuleStatement;

        #endregion
        #region Association Fixup
    
        private void FixuptblRuleStatement(RuleStatement previousValue)
        {
            if (previousValue != null && previousValue.tblRuleSets.Contains(this))
            {
                previousValue.tblRuleSets.Remove(this);
            }
    
            if (tblRuleStatement != null)
            {
                if (!tblRuleStatement.tblRuleSets.Contains(this))
                {
                    tblRuleStatement.tblRuleSets.Add(this);
                }
                if (RuleStatementId != tblRuleStatement.Id)
                {
                    RuleStatementId = tblRuleStatement.Id;
                }
            }
        }
    
        private void FixuptblRules(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Rule item in e.NewItems)
                {
                    item.tblRuleSet = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Rule item in e.OldItems)
                {
                    if (ReferenceEquals(item.tblRuleSet, this))
                    {
                        item.tblRuleSet = null;
                    }
                }
            }
        }

        #endregion
    }
}
